})
output$my_histogram <- renderPlot({
popularityHistogram(filtered())
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
checkboxGroupInput("types", "Network types:",
c("Random" = "ER",
"Non-scale" = "BA",
"Lattice" = "SQ")),
checkboxGroupInput("edit", "Ability to edit:",
c("Yes" = "0.05",
"No" = "0")),
sliderInput("tau", "Threshold", min = -1, max = 1, step = 0.2, value = 0.0)
),
mainPanel(
plotOutput("my_histogram", height = 900)
)
)
)
shinyApp(ui = ui, server = server)
newData
newData[newData$tau == 0, ]
parameters
[[1]]
parameters[[1]]
parameters[[2]]
parameters[[]]
parameters[[3]]
parameters[[4]]
parameters[[5]]
parameters[[6]]
parameters[[7]]
parameters[[8]]
parameters[[9]]
parameters[[10]]
parameters[[11]]
newData$tau
server <- function(input, output) {
filtered <- reactive({
newData %>%
filter(network_type %in% input$types,
tau %in% input$tau,
eta %in% input$edit)
})
observe({
print(input$types)
print(input$edit)
print(input$tau)
})
output$my_histogram <- renderPlot({
popularityHistogram(filtered())
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
filtered <- reactive({
newData %>%
filter(network_type %in% input$types,
tau == input$tau,
eta %in% input$edit)
})
observe({
print(input$types)
print(input$edit)
print(input$tau)
})
output$my_histogram <- renderPlot({
popularityHistogram(filtered())
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
filtered <- reactive({
newData %>%
filter(network_type %in% input$types,
tau == as.dobule(input$tau),
eta %in% as.double(input$edit))
})
observe({
print(input$types)
print(input$edit)
print(input$tau)
})
output$my_histogram <- renderPlot({
popularityHistogram(filtered())
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
filtered <- reactive({
newData %>%
filter(network_type %in% input$types,
tau == as.double(input$tau),
eta %in% as.double(input$edit))
})
observe({
print(input$types)
print(input$edit)
print(input$tau)
})
output$my_histogram <- renderPlot({
popularityHistogram(filtered())
})
}
shinyApp(ui = ui, server = server)
newData[newData$tau == 0, ]
newData[newData$tau == 0.2, ]
newData[newData$tau == 0.0, ]
newData[newData$tau == 0, ]
newData[newData$tau == 0.0, ]
newData[newData$tau == -0.0, ]
newData[newData$tau == 0.0, ]
newData$tau
data$tau
data$tau == 0
sum(data$tau == 0)
sum(data$tau == 0.2)
sum(data$tau == 0.0)
sum(data$tau == "0")
sum(data$tau == "0.0")
sum(data$tau == "0.2")
server <- function(input, output) {
filtered <- reactive({
newData %>%
filter(network_type %in% input$types,
tau == toString(input$tau),
eta %in% toString(input$edit))
})
observe({
print(input$types)
print(input$edit)
print(input$tau)
})
output$my_histogram <- renderPlot({
popularityHistogram(filtered())
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
filtered <- reactive({
newData %>%
filter(network_type %in% input$types,
tau == toString(as.double(input$tau)),
eta %in% toString(as.double(input$edit)))
})
observe({
print(input$types)
print(input$edit)
print(input$tau)
})
output$my_histogram <- renderPlot({
popularityHistogram(filtered())
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
filtered <- reactive({
newData %>%
filter(network_type %in% input$types,
tau == as.factor(input$tau),
eta %in% as.factor(input$edit))
})
observe({
print(input$types)
print(input$edit)
print(input$tau)
})
output$my_histogram <- renderPlot({
popularityHistogram(filtered())
})
}
shinyApp(ui = ui, server = server)
format(round(c(0, 0.2), 2), nsmall = 2)
format(round(c(0, 0.2), 2), nsmall = 1)
format(c(0, 0.2), nsmall = 1)
format(c(0, 0.2), nsmall = 1)
server <- function(input, output) {
filtered <- reactive({
newData %>%
filter(network_type %in% input$types,
tau == toString(format(input$tau, nsmall = 1)),
eta %in% toString(format(input$edit, nsmall = 1)))
})
observe({
print(input$types)
print(input$edit)
print(input$tau)
})
output$my_histogram <- renderPlot({
popularityHistogram(filtered())
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
filtered <- reactive({
newData %>%
filter(network_type %in% input$types,
tau == toString(format(input$tau, nsmall = 1)),
eta %in% toString(format(input$edit, nsmall = 1)))
})
observe({
print(input$types)
print(toString(format(input$tau, nsmall = 1)))
print(toString(format(input$edit, nsmall = 1)))
})
output$my_histogram <- renderPlot({
popularityHistogram(filtered())
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
filtered <- reactive({
newData %>%
filter(network_type %in% input$types,
tau == toString(format(input$tau, nsmall = 1)),
eta %in% toString(format(input$edit, nsmall = 1)))
})
observe({
print(input$types)
print(format(input$tau, nsmall = 1))
print(format(input$edit, nsmall = 1))
})
output$my_histogram <- renderPlot({
popularityHistogram(filtered())
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
filtered <- reactive({
newData %>%
filter(network_type %in% input$types,
tau == toString(format(input$tau, nsmall = 1)),
eta %in% toString(format(input$edit, nsmall = 1)))
})
observe({
print(input$types)
print(format(as.numeric(input$tau), nsmall = 1))
print(format(input$edit, nsmall = 1))
})
output$my_histogram <- renderPlot({
popularityHistogram(filtered())
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
filtered <- reactive({
newData %>%
filter(network_type %in% input$types,
tau == format(as.numeric(input$tau), nsmall = 1),
eta %in% format(as.numeric(input$edit), nsmall = 1))
})
observe({
print(input$types)
print(format(as.numeric(input$tau), nsmall = 1))
print(format(as.numeric(input$edit), nsmall = 1))
})
output$my_histogram <- renderPlot({
popularityHistogram(filtered())
})
}
shinyApp(ui = ui, server = server)
newData$eta
server <- function(input, output) {
filtered <- reactive({
newData %>%
filter(network_type %in% input$types,
as.numeric(tau) == as.numeric(input$tau),
as.numeric(eta) %in% as.numeric(input$edit))
})
observe({
print(input$types)
print(format(as.numeric(input$tau), nsmall = 1))
print(format(as.numeric(input$edit), nsmall = 1))
})
output$my_histogram <- renderPlot({
popularityHistogram(filtered())
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
filtered <- reactive({
newData %>%
filter(network_type %in% input$types,
tau == format(as.numeric(input$tau), nsmall = 1),
eta %in% format(as.numeric(input$edit), nsmall = 1))
})
observe({
print(input$types)
print(format(as.numeric(input$tau), nsmall = 1))
print(format(as.numeric(input$edit), nsmall = 1))
})
output$my_histogram <- renderPlot({
popularityHistogram(filtered())
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output) {
filtered <- reactive({
newData %>%
filter(network_type %in% input$types,
tau == format(as.numeric(input$tau), nsmall = 1),
eta %in% as.numeric(input$edit))
})
observe({
print(input$types)
print(format(as.numeric(input$tau), nsmall = 1))
print(as.numeric(input$edit))
})
output$my_histogram <- renderPlot({
popularityHistogram(filtered())
})
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
server <- function(input, output) {
filtered <- reactive({
newData %>%
filter(network_type %in% input$types,
tau == format(as.numeric(input$tau), nsmall = 1),
eta %in% input$edit)
})
observe({
print(input$types)
print(format(as.numeric(input$tau), nsmall = 1))
print(input$edit)
})
output$my_histogram <- renderPlot({
popularityHistogram(filtered())
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
checkboxGroupInput("types", "Network types:",
c("Random" = "ER",
"Non-scale" = "BA",
"Lattice" = "SQ")),
checkboxGroupInput("edit", "Ability to edit:",
c("Yes" = "0.05",
"No" = "0.0")),
sliderInput("tau", "Threshold", min = -1, max = 1, step = 0.2, value = 0.0)
),
mainPanel(
plotOutput("my_histogram", height = 900)
)
)
)
server <- function(input, output) {
filtered <- reactive({
newData %>%
filter(network_type %in% input$types,
tau == format(as.numeric(input$tau), nsmall = 1),
eta %in% input$edit)
})
observe({
print(input$types)
print(format(as.numeric(input$tau), nsmall = 1))
print(input$edit)
})
output$my_histogram <- renderPlot({
popularityHistogram(filtered())
})
}
shinyApp(ui = ui, server = server)
newData
popularityHistogram <- function(histogram) {
plot <- ggplot(data = histogram, aes(x = x, y = y, color = network_type, shape = eta)) +
geom_point(size = 3) +
theme(
text=element_text(size=28),
axis.text=element_text(color="black"),
axis.ticks.length = unit(0, "cm"),
plot.title=element_text(hjust=0.5),
panel.border=element_rect(fill=NA),
panel.background=element_blank(),
legend.key=element_rect(fill=NA, color=NA),
legend.background=element_rect(fill=(alpha("white", 0))),
legend.title=element_blank(),
legend.position=c(0.6, 0.8),
legend.box.background=element_rect(colour = "black"),
legend.spacing.y = unit(0, "mm")
) +
xlab("number of shares") +
ylab("probability density") +
scale_x_continuous(labels = math_format(10^.x),
limits = c(0, 3),
breaks = seq(0,5)) +
scale_y_continuous(trans = 'log10',
labels = trans_format("log10", math_format(10^.x)),
limits = c(.3*10^-8, .3*10^1),
breaks = 10^(-9:1)) +
annotation_logticks(sides="lb")
plot
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
popularityHistogram <- function(histogram) {
plot <- ggplot(data = histogram, aes(x = x, y = y, color = network_type, shape = eta)) +
geom_point(size = 3) +
theme(
text=element_text(size = 28),
axis.text=element_text(color= "black"),
axis.ticks.length = unit(0, "cm"),
plot.title=element_text(hjust = 0.5),
panel.border=element_rect(fill = NA),
panel.background=element_blank(),
legend.key=element_rect(fill = NA, color = NA),
legend.background=element_rect(fill = (alpha("white", 0))),
legend.title=element_blank(),
legend.position=c(0.6, 0.8),
legend.box.background=element_rect(colour = "black"),
legend.spacing.y = unit(0, "mm")
) +
xlab("number of shares") +
ylab("probability density") +
scale_shape(values = c(1, 2)) +
scale_x_continuous(labels = math_format(10^.x),
limits = c(0, 3),
breaks = seq(0,5)) +
scale_y_continuous(trans = 'log10',
labels = trans_format("log10", math_format(10^.x)),
limits = c(.3*10^-8, .3*10^1),
breaks = 10^(-9:1)) +
annotation_logticks(sides="lb")
plot
}
shinyApp(ui = ui, server = server)
popularityHistogram <- function(histogram) {
plot <- ggplot(data = histogram, aes(x = x, y = y, color = network_type, shape = eta)) +
geom_point(size = 3) +
theme(
text=element_text(size = 28),
axis.text=element_text(color= "black"),
axis.ticks.length = unit(0, "cm"),
plot.title=element_text(hjust = 0.5),
panel.border=element_rect(fill = NA),
panel.background=element_blank(),
legend.key=element_rect(fill = NA, color = NA),
legend.background=element_rect(fill = (alpha("white", 0))),
legend.title=element_blank(),
legend.position=c(0.6, 0.8),
legend.box.background=element_rect(colour = "black"),
legend.spacing.y = unit(0, "mm")
) +
xlab("number of shares") +
ylab("probability density") +
scale_shape_manual(values = c(1, 2)) +
scale_x_continuous(labels = math_format(10^.x),
limits = c(0, 3),
breaks = seq(0,5)) +
scale_y_continuous(trans = 'log10',
labels = trans_format("log10", math_format(10^.x)),
limits = c(.3*10^-8, .3*10^1),
breaks = 10^(-9:1)) +
annotation_logticks(sides="lb")
plot
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
checkboxGroupInput("types", "Network types:",
c("Random" = "ER",
"Non-scale" = "BA",
"Lattice" = "SQ")),
checkboxGroupInput("edit", "Ability to edit:",
c("Yes" = "0.05",
"No" = "0.0")),
sliderInput("tau", "Threshold", min = -1, max = 1, step = 0.2, value = 0.0)
),
mainPanel(
plotOutput("my_histogram", height = 900)
)
)
)
popularityHistogram <- function(histogram) {
plot <- ggplot(data = histogram, aes(x = x, y = y, color = network_type, shape = eta)) +
geom_point(size = 3) +
theme(
text=element_text(size = 28),
axis.text=element_text(color= "black"),
axis.ticks.length = unit(0, "cm"),
plot.title=element_text(hjust = 0.5),
panel.border=element_rect(fill = NA),
panel.background=element_blank(),
legend.key=element_rect(fill = NA, color = NA),
legend.background=element_rect(fill = (alpha("white", 0))),
legend.title=element_blank(),
legend.position=c(0.6, 0.8),
legend.box.background=element_rect(colour = "black"),
legend.spacing.y = unit(0, "mm")
) +
xlab("number of shares") +
ylab("probability density") +
scale_shape_manual(values = c(4, 20)) +
scale_x_continuous(labels = math_format(10^.x),
limits = c(0, 3),
breaks = seq(0,5)) +
scale_y_continuous(trans = 'log10',
labels = trans_format("log10", math_format(10^.x)),
limits = c(.3*10^-8, .3*10^1),
breaks = 10^(-9:1)) +
annotation_logticks(sides="lb")
plot
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
