Sys.getenv("PATH")
Sys.which("pdflatex")
Sys.which("pdflatex")
Sys.getenv("PATH")
Sys.which("pdflatex")
Sys.which("pdflatex")
install.packages("shiny")
source('D:/Workspace/information-vector-model/results/16_02_2021.R', echo=TRUE)
ui <- fluidPage(
sidebarLayout(
sidebarPanel(
checkboxGroupInput("types", "Network types:",
c("Random" = "ER",
"Non-scale" = "BA",
"Lattice" = "SQ")),
checkboxGroupInput("edit", "Ability to edit:",
c("Yes" = "0.05",
"No" = "0.0")),
sliderInput("tau", "Threshold", min = -1, max = 1, step = 0.02, value = 0.0)
),
mainPanel(
plotOutput("my_histogram", height = 900)
)
)
)
server <- function(input, output) {
filtered <- reactive({
newData %>%
filter(network_type %in% input$types,
tau == format(as.numeric(input$tau), nsmall = 1),
eta %in% input$edit)
})
output$my_histogram <- renderPlot({
popularityHistogram(filtered())
})
}
shinyApp(ui = ui, server = server)
newData <- vector(mode = "list")
breaks <- 220
for(i in 1:length(levels(data$network_type))) {
for(j in 1:length(levels(data$tau))) {
for(k in 1:length(levels(data$eta))) {
tempHist <- hist(log10(data[data$network_type == levels(data$network_type)[i] &
data$tau == levels(data$tau)[j] &
data$eta == levels(data$eta)[k], 5]),
breaks = breaks,
plot = FALSE)
factor <- 10^tempHist$breaks[-1] - 10^tempHist$breaks[-length(tempHist$breaks)]
sum <- sum(tempHist$counts)
tempHist <- data.frame(x = tempHist$mids, y = tempHist$counts/factor/sum)
tempHist <- tempHist[tempHist$y != 0,]
tempHist$network_type <- as.factor(rep(levels(data$network_type)[i], nrow(tempHist)))
tempHist$tau <- as.factor(rep(levels(data$tau)[j], nrow(tempHist)))
tempHist$eta <- as.factor(rep(levels(data$eta)[k], nrow(tempHist)))
newData[[length(newData) + 1]] <- tempHist
}
}
}
newData <- bind_rows(newData)
shinyApp(ui = ui, server = server)
